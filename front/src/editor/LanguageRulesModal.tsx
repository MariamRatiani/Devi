import './languageRulesModal.css';

const LanguageRulesModal = ({ onClose }) => {
    const rules = [
        {
            title: 'ცვლადის აღწერა',
            description: `
                გვაქვს სამი ტიპის ცვლადი, რომლებმაც შეიძლება მიიღონ შემდეგი მნიშვნელობები: რიცხვი, სიტყვა და ლოგიკური მნიშვნელობა,
                მათი აღწერისას პირველი იწერება ცვლადის ტიპი, შემდეგ ცვლადის სახელი და ბოლოს ვანიჭებთ შესაბამის მნიშვნელობას  
            `,
            note: `ბრძანების ბოლოს აუცილებლად უნდა დაიწეროს შემდეგი სიმბოლო: ';'`,
            example: `
                რიცხვი ჯამში = 10;
                სიტყვა სახელი = "შოთა";
                ბულეანი არის_ყველა = ჭეშმარიტი;
            `
        },
        {
            title: 'ცვლადზე ახალი მნიშვნელობის მინიჭერბა',
            description: `შესაძლებელია უკვე შექმნილ ცვლადს, ხელახლა მივანიჭოთ ახალი მნიშვნელობა, რომელიც შეგვიძლია გამოვთვალოთ მათემატიკური და ლოგიკური ოპერაციებით`,
            note: `ბრძანების ბოლოს აუცილებლად უნდა დაიწეროს შემდეგი სიმბოლო: ';'`,
            example: `
                რიცხვი ჯამში = 10;
                ბულეანი არის_ყველა = ჭეშმარიტი;
                ჯამში = ჯამში + 10 * 5;
                არის_ყველა = მცდარი;
            `
        },
        {
            title: 'ფუნქციის გამოძახება',
            description: `
            ფუნქციის გამოძახება ხდება შემდეგნაირად სპეციალური ბრძანების შემდეგ უნდა დავწეროთ '()', 
            გვაქვს 4 სპეციალური ბრძანება: წინ(), ახტომა(), უკან(), უკან_ახტომა(), რომელთა გამოძახების შემდეგ გმირი შესაბამისად იქცევა
            `,
            note: `ბრძანების ბოლოს აუცილებლად უნდა დაიწეროს შემდეგი სიმბოლო: ';'`,
            example: `
                წინ();
                ახტომა();
                უკან();
                უკან_ახტომა();
            `
        },
        {
            title: 'თუ ბრძანება',
            description: 'თუ პირობა არის ჭეშმარიტი შესრულდება ბლოკში არსებული ბრძანებები',
            note: `ბრძანება შეიძლება იყოს 1-ზე მეტი`,
            example: `
                თუ (პირობა) {
                    წინ();
                }
            `
        },
        {
            title: 'სანამ ბრძანება',
            description: 'ბრძანება შესრულდება მანამ, სანამ პირობა შეესაბამება ჭეშმარიტს',
            example: `
                სანამ (პირობა) {
                    ახტომა();
                    წინ();
                }
            `
        },
        {
            title: 'გაიმეორე ბრძანება',
            description: 'ბლოკკში არსებული ბრძანებები გამეორდება იმდენჯერ რამდენჯერაც `გაიმეორე`-ს გვერდზე მიწერილი რიცხვი იქნება',
            note: `ფრჩხილებში შესაძლებელია რიცხვის ტიპის ცვლადიც იყოს`,
            example: `
                გაიმეორე (3) {
                    წინ();
                }
            `
        }
    ];

    return (
        <div className="modal-overlay">
            <div className="modal-content">
                <button className="close-button" onClick={onClose}>X</button>
                <h2>ქართული პროგრამირების ენის წესები და სინტაქსი</h2>
                {rules.map((rule, index) => (
                    <div key={index} className="rule-section">
                        <h3>{rule.title}</h3>
                        <p>{rule.description}</p>
                        {rule.note && <p id="rule-note">{rule.note}</p>}
                        <pre>
                            <code>{rule.example}</code>
                        </pre>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default LanguageRulesModal;
